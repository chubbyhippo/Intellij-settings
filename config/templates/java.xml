<templateSet group="java">
  <template name="test" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;$DISPLAY_NAME$&quot;)&#10;void $METHOD_NAME$() {&#10;    $END$&#10;    $BODY$&#10;}" description="Create a new JUnit test that fails" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="DISPLAY_NAME" expression="" defaultValue="&quot;Display name for the test method&quot;" alwaysStopAt="true" />
    <variable name="METHOD_NAME" expression="camelCase(DISPLAY_NAME)" defaultValue="&quot;mehodName&quot;" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="&quot;org.junit.jupiter.api.Assertions.fail(\&quot;Not implemented\&quot;);&quot;" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="logger" value="private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);" description="SLF4J logger" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="random" value="java.util.concurrent.ThreadLocalRandom.current()" description="ThreadLocalRandom.current()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="util" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="uc" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="uct" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;  var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | Ille galAccessException |&#10;                 InvocationTargetException exception) {&#10;        assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        assertThat(exception.getCause().getMessage( )).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}" description="Create a new JUnit test for utility class" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="utiltest" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;    var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | IllegalAccessException |&#10;             java.lang.reflect.InvocationTargetException exception) {&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getMessage()).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}&#10;" description="Create a new JUnit test for private constructor" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CLASS_NAME" expression="substringBefore(className(), &quot;Test&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="ut" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;    var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | IllegalAccessException |&#10;             java.lang.reflect.InvocationTargetException exception) {&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getMessage()).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}&#10;" description="Create a new JUnit test for private constructor" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CLASS_NAME" expression="substringBefore(className(), &quot;Test&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="utilclass" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="readfile" value="java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;try {&#10;    String content = java.nio.file.Files.readString(filePath);&#10;    System.out.println(content);&#10;} catch (java.io.IOException e) {&#10;    throw new RuntimeException(e);&#10;}" description="Get string from reading text file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>